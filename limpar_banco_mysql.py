#!/usr/bin/env python3
"""
Script para limpar todos os dados do banco MySQL
"""

import pymysql

# Configura√ß√µes do banco
DB_CONFIG = {
    'host': 'estoquesilkart.mysql.uhserver.com',
    'port': 3306,
    'user': 'mateusfinderbit',
    'password': 'MJs119629@03770',
    'database': 'estoquesilkart',
    'charset': 'utf8mb4'
}

def limpar_banco():
    """Limpar todos os dados do banco"""
    
    print("üóëÔ∏è LIMPANDO BANCO DE DADOS MYSQL")
    print("=" * 40)
    
    try:
        # Conectar ao MySQL
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()
        
        print("‚úÖ Conectado ao MySQL remoto!")
        
        # Desabilitar verifica√ß√µes de chave estrangeira
        print("\nüîì Desabilitando verifica√ß√µes de chave estrangeira...")
        cursor.execute("SET FOREIGN_KEY_CHECKS = 0")
        
        # Limpar todas as tabelas do sistema
        print("\nüßπ Limpando tabelas do sistema...")
        
        tabelas_para_limpar = [
            'estoque_itemvenda',
            'estoque_movimentacaoestoque', 
            'estoque_venda',
            'estoque_produto',
            'estoque_fornecedor',
            'estoque_categoria'
        ]
        
        for tabela in tabelas_para_limpar:
            try:
                cursor.execute(f"DELETE FROM {tabela}")
                print(f"  ‚úÖ {tabela} limpa")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  {tabela}: {e}")
        
        # Reabilitar verifica√ß√µes de chave estrangeira
        print("\nüîí Reabilitando verifica√ß√µes de chave estrangeira...")
        cursor.execute("SET FOREIGN_KEY_CHECKS = 1")
        
        # Inserir dados iniciais b√°sicos
        print("\nüå± Inserindo dados iniciais b√°sicos...")
        
        # Categoria padr√£o
        cursor.execute("""
            INSERT INTO estoque_categoria (nome, descricao, ativa) 
            VALUES ('Geral', 'Categoria padr√£o para produtos sem categoria espec√≠fica', TRUE)
        """)
        print("  ‚úÖ Categoria padr√£o inserida")
        
        # Fornecedor padr√£o
        cursor.execute("""
            INSERT INTO estoque_fornecedor (nome, cnpj, ativo) 
            VALUES ('Fornecedor Padr√£o', '00.000.000/0001-00', TRUE)
        """)
        print("  ‚úÖ Fornecedor padr√£o inserido")
        
        connection.commit()
        
        # Verificar estado final
        print("\nüìä ESTADO FINAL DO BANCO")
        print("=" * 30)
        
        cursor.execute("SELECT COUNT(*) FROM estoque_categoria")
        cat_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM estoque_fornecedor")
        forn_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM estoque_produto")
        prod_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM estoque_movimentacaoestoque")
        mov_count = cursor.fetchone()[0]
        
        print(f"üìÇ Categorias: {cat_count}")
        print(f"üè¢ Fornecedores: {forn_count}")
        print(f"üì¶ Produtos: {prod_count}")
        print(f"üîÑ Movimenta√ß√µes: {mov_count}")
        
        cursor.close()
        connection.close()
        
        print("\nüéâ BANCO LIMPO COM SUCESSO!")
        print("=" * 40)
        print("üìã Pr√≥ximos passos:")
        print("1. Execute: python manage.py runserver")
        print("2. Acesse: http://127.0.0.1:8000")
        print("3. Fa√ßa login com: admin / admin")
        print("4. Insira os dados manualmente pelo sistema!")
        print("=" * 40)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao limpar banco: {e}")
        return False

if __name__ == "__main__":
    limpar_banco()
