#!/usr/bin/env python3
"""
Script para testar todos os formul√°rios e relat√≥rios do sistema
"""

import os
import sys
import django
from django.test import Client
from django.contrib.auth.models import User
from django.urls import reverse
from django.test import TestCase
from estoque.models import Categoria, Fornecedor, Produto, MovimentacaoEstoque, Venda, ItemVenda
from estoque.forms import ProdutoForm, MovimentacaoForm, VendaForm, ItemVendaForm, BuscaProdutoForm

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sge_sistema.settings')
django.setup()

def test_formularios():
    """Testar todos os formul√°rios do sistema"""
    print("üîç Testando Formul√°rios do Sistema...")
    
    # Criar dados de teste
    categoria = Categoria.objects.create(
        nome="Teste Categoria",
        descricao="Categoria para teste",
        ativa=True
    )
    
    fornecedor = Fornecedor.objects.create(
        nome="Fornecedor Teste",
        cnpj="12.345.678/0001-90",
        endereco="Endere√ßo Teste",
        telefone="(11) 99999-9999",
        email="teste@fornecedor.com",
        contato="Jo√£o Silva",
        ativo=True
    )
    
    produto = Produto.objects.create(
        codigo="TEST001",
        nome="Produto Teste",
        descricao="Produto para teste",
        categoria=categoria,
        fornecedor=fornecedor,
        preco_custo=10.00,
        preco_venda=15.00,
        estoque_minimo=5,
        estoque_atual=20,
        unidade="UN",
        ativo=True
    )
    
    print("‚úÖ Dados de teste criados com sucesso!")
    
    # Testar Formul√°rio de Produto
    print("\nüìù Testando Formul√°rio de Produto...")
    produto_data = {
        'codigo': 'TEST002',
        'nome': 'Produto Teste 2',
        'descricao': 'Segundo produto para teste',
        'categoria': categoria.id,
        'fornecedor': fornecedor.id,
        'preco_custo': 20.00,
        'preco_venda': 30.00,
        'estoque_minimo': 3,
        'estoque_atual': 15,
        'unidade': 'UN',
        'ativo': True
    }
    
    form = ProdutoForm(data=produto_data)
    if form.is_valid():
        print("‚úÖ Formul√°rio de Produto: V√ÅLIDO")
        produto2 = form.save()
        print(f"‚úÖ Produto criado: {produto2.nome}")
    else:
        print("‚ùå Formul√°rio de Produto: INV√ÅLIDO")
        print(f"Erros: {form.errors}")
    
    # Testar Formul√°rio de Movimenta√ß√£o
    print("\nüìù Testando Formul√°rio de Movimenta√ß√£o...")
    movimentacao_data = {
        'produto': produto.id,
        'tipo': 'ENTRADA',
        'quantidade': 10,
        'observacoes': 'Movimenta√ß√£o de teste',
        'destino': 'Estoque Principal'
    }
    
    form = MovimentacaoForm(data=movimentacao_data)
    if form.is_valid():
        print("‚úÖ Formul√°rio de Movimenta√ß√£o: V√ÅLIDO")
        movimentacao = form.save()
        print(f"‚úÖ Movimenta√ß√£o criada: {movimentacao.tipo} - {movimentacao.quantidade} unidades")
    else:
        print("‚ùå Formul√°rio de Movimenta√ß√£o: INV√ÅLIDO")
        print(f"Erros: {form.errors}")
    
    # Testar Formul√°rio de Venda
    print("\nüìù Testando Formul√°rio de Venda...")
    venda_data = {
        'cliente': 'Cliente Teste',
        'desconto': 0.00,
        'observacoes': 'Venda de teste'
    }
    
    form = VendaForm(data=venda_data)
    if form.is_valid():
        print("‚úÖ Formul√°rio de Venda: V√ÅLIDO")
        venda = form.save()
        print(f"‚úÖ Venda criada: {venda.cliente}")
    else:
        print("‚ùå Formul√°rio de Venda: INV√ÅLIDO")
        print(f"Erros: {form.errors}")
    
    # Testar Formul√°rio de Item de Venda
    print("\nüìù Testando Formul√°rio de Item de Venda...")
    item_data = {
        'produto': produto.id,
        'quantidade': 2,
        'preco_unitario': 15.00
    }
    
    form = ItemVendaForm(data=item_data)
    if form.is_valid():
        print("‚úÖ Formul√°rio de Item de Venda: V√ÅLIDO")
        item = form.save()
        print(f"‚úÖ Item criado: {item.produto.nome} - {item.quantidade} unidades")
    else:
        print("‚ùå Formul√°rio de Item de Venda: INV√ÅLIDO")
        print(f"Erros: {form.errors}")
    
    # Testar Formul√°rio de Busca
    print("\nüìù Testando Formul√°rio de Busca...")
    busca_data = {
        'busca': 'Produto Teste',
        'categoria': categoria.id,
        'status_estoque': ''
    }
    
    form = BuscaProdutoForm(data=busca_data)
    if form.is_valid():
        print("‚úÖ Formul√°rio de Busca: V√ÅLIDO")
        print(f"‚úÖ Busca: {form.cleaned_data['busca']}")
    else:
        print("‚ùå Formul√°rio de Busca: INV√ÅLIDO")
        print(f"Erros: {form.errors}")
    
    print("\nüéâ Teste de Formul√°rios Conclu√≠do!")

def test_relatorios():
    """Testar gera√ß√£o de relat√≥rios"""
    print("\nüìä Testando Gera√ß√£o de Relat√≥rios...")
    
    # Verificar produtos com estoque baixo
    produtos_estoque_baixo = Produto.objects.filter(
        ativo=True,
        estoque_atual__lte=models.F('estoque_minimo')
    ).count()
    
    print(f"‚úÖ Produtos com estoque baixo: {produtos_estoque_baixo}")
    
    # Verificar produtos sem estoque
    produtos_sem_estoque = Produto.objects.filter(
        ativo=True,
        estoque_atual=0
    ).count()
    
    print(f"‚úÖ Produtos sem estoque: {produtos_sem_estoque}")
    
    # Verificar total de produtos
    total_produtos = Produto.objects.filter(ativo=True).count()
    print(f"‚úÖ Total de produtos: {total_produtos}")
    
    # Verificar total de vendas
    total_vendas = Venda.objects.count()
    print(f"‚úÖ Total de vendas: {total_vendas}")
    
    # Verificar movimenta√ß√µes
    total_movimentacoes = MovimentacaoEstoque.objects.count()
    print(f"‚úÖ Total de movimenta√ß√µes: {total_movimentacoes}")
    
    print("\nüéâ Teste de Relat√≥rios Conclu√≠do!")

def test_views():
    """Testar views do sistema"""
    print("\nüåê Testando Views do Sistema...")
    
    client = Client()
    
    # Testar login
    print("üîê Testando p√°gina de login...")
    response = client.get('/accounts/login/')
    if response.status_code == 200:
        print("‚úÖ P√°gina de login: OK")
    else:
        print(f"‚ùå P√°gina de login: ERRO {response.status_code}")
    
    # Testar dashboard (deve redirecionar para login)
    print("üè† Testando dashboard...")
    response = client.get('/estoque/')
    if response.status_code == 302:
        print("‚úÖ Dashboard redireciona para login: OK")
    else:
        print(f"‚ùå Dashboard: ERRO {response.status_code}")
    
    print("\nüéâ Teste de Views Conclu√≠do!")

if __name__ == "__main__":
    try:
        test_formularios()
        test_relatorios()
        test_views()
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE OS TESTES: {e}")
        import traceback
        traceback.print_exc()
